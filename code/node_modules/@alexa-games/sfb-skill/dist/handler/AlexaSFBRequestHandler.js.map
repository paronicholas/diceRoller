{"version":3,"file":"AlexaSFBRequestHandler.js","sourceRoot":"","sources":["../../src/handler/AlexaSFBRequestHandler.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { HandlerInput, RequestHandler } from 'ask-sdk-core';\nimport { Response, Slot } from 'ask-sdk-model';\nimport { ACEDriver, UserInput, StoryMetadata, ABCImportPlugin, Choice, StoryStateHelper, Slot as ABCSlot, DriverExtension, ImporterExtension, InstructionExtension } from '@alexa-games/sfb-f';\nimport { ConfigAccessor } from '../configAccessor';\n\ntype ExtensionType = DriverExtension | ImporterExtension | InstructionExtension;\nexport interface SFBHandlerConfig {\n    locale: string;\n    story: StoryMetadata;\n    pollyVoiceConfig: any;\n    defaultVoiceConfig: any;\n    attributeTableName: any;\n}\n\nexport class SFBRequestHandler implements RequestHandler {\n\tpublic static debug = false;\n\n\tconstructor(public config: SFBHandlerConfig, public customExtensions: ExtensionType[],\n\t\tpublic configAccessor: ConfigAccessor, public projectDir: string) {\n    }\n\n\tcanHandle(handlerInput : HandlerInput): boolean {\n\t\treturn true;\n    }\n\n    getTableName(): string {\n\t\treturn this.config.attributeTableName;\n    }\n\n\tasync handle(handlerInput : HandlerInput): Promise<Response> {\n\t\tif (SFBRequestHandler.debug) console.debug(\"Starting SFBRequestHandler handle().\");\n\t\tconst handleStart = new Date().getTime();\n\n\t\t// Load the story metadata\n\t\tconst storyData: StoryMetadata = this.config.story;\n\n\t\t// Load persistent attributes (previous state)\n\t\tlet gameState: any;\n\n\t\ttry {\n\t\t\tif (SFBRequestHandler.debug) console.debug(\"Starting persistent attributes request.\");\n\t\t\tconst startTime = new Date().getTime();\n\n\t\t\tgameState = await handlerInput.attributesManager.getPersistentAttributes();\n\t\t\tconst duration = new Date().getTime() - startTime;\n\t\t\tif (SFBRequestHandler.debug) console.debug(`Persistent attributes retrieved in ${duration}ms.`);\n\t\t} catch (error) {\n\t\t\treturn this.buildPersistentAttributeErrorResponse(error, handlerInput);\n\t\t}\n\n\t\t// Set up import plugins used (if any)\n\t\tlet customImportPlugins: ABCImportPlugin[] = [];\n\n\t\tlet userInput: UserInput = {\n\t\t\thandlerInput: handlerInput\n\t\t}\n\t\t//this.parseAsUserInput(handlerInput, extensionLoader.monetizationExtension, sessionAttributes);\n\n\t\t// Set up the ABC Story Driver\n\t\tlet storyDriver: ACEDriver = new ACEDriver(storyData, customImportPlugins, this.customExtensions, this.config.pollyVoiceConfig, this.config.locale);\n\n        // Configure default polly narrator\n        const NARRATOR: any = this.config.defaultVoiceConfig;\n\t\tif (NARRATOR && this.config.defaultVoiceConfig.enabled) {\n\t\t\tstoryDriver.configureDefaultPollyNarrator(NARRATOR);\n\t\t\tstoryDriver.turnOnDefaultPolly();\n\t\t} else {\n\t\t\tstoryDriver.turnOffDefaultPolly();\n\t\t}\n\n\t\t/*\n\t\t* RUN Content\n\t\t*/\n\t\tconsole.log(`[INFO] Begin story run with state: ${JSON.stringify(gameState, null, 4)}`);\n\t\tconst startTime = new Date().getTime();\n\n\t\tawait storyDriver.resumeStory(userInput, gameState);\n\n\t\tconst duration = new Date().getTime() - startTime;\n\t\tif (SFBRequestHandler.debug) console.debug(`SFB Driver finished in ${duration}ms.`);\n\n\t\t// Save the story state for the session\n\t\tconst resultState = storyDriver.getCurrentStoryState();\n\t\tconsole.log(`[INFO] Story run complete with state=${JSON.stringify(resultState, null, 4)}`);\n\t\thandlerInput.attributesManager.setPersistentAttributes(resultState);\n\n\t\tconst saveStartTime = new Date().getTime();\n\t\tawait handlerInput.attributesManager.savePersistentAttributes();\n\t\tconst saveDuration = new Date().getTime() - saveStartTime;\n\t\tif (SFBRequestHandler.debug) console.debug(`persistent attributes saved in ${saveDuration}ms.`);\n\n\t\tconst response = handlerInput.responseBuilder.getResponse();\n\n\t\t/**\n\t\t * Some fundamental Alexa Response rules.. .which should be handled by ASK.\n\t\t */\n\t\tif (response.directives) {\n\t\t\tfor (let directive of response.directives) {\n\t\t\t\t// TODO: Does this check need to be here or can it be in he extension itself somehow?\n\t\t\t\tif (directive.type === \"Connections.SendRequest\" ||\n\t\t\t\t    directive.type === \"AudioPlayer.Play\") {\n\t\t\t\t\t// should end session has to be TRUE when sending Connections.SendRequest response.\n\t\t\t\t\tresponse.shouldEndSession = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// TODO: Do I need check for additional items that need deleting for a PlayAudio directive\n\n\t\tif (response.shouldEndSession && response.reprompt) {\n\t\t\t// cannot have reprompt when shouldEndSession is true.\n\t\t\tdelete response.reprompt;\n\t\t}\n\t\tconst handleDuration = new Date().getTime() - handleStart;\n\t\tif (SFBRequestHandler.debug) console.debug(`SFB Request Handler handle() finished in ${handleDuration}ms.`);\n\n\t\treturn response;\n\t}\n\n\tprotected isPausingRequest(handlerInput: HandlerInput): boolean {\n\t\tif (handlerInput.requestEnvelope.request.type === \"SessionEndedRequest\") {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (handlerInput.requestEnvelope.request.type === 'IntentRequest') {\n\t\t\tconst intent = handlerInput.requestEnvelope.request.intent.name;\n\n\t\t\treturn intent == \"SessionEndedRequest\" || intent == \"AMAZON.StopIntent\" || intent == \"AMAZON.PauseIntent\" || intent == \"AMAZON.CancelIntent\"\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate buildPersistentAttributeErrorResponse(error: any, handlerInput: HandlerInput): Response {\n\t\tlet err: string = error.toString();\n\t\tif (err.match(new RegExp(\"is not authorized to perform\", \"gi\")) != null) {\n\t\t\treturn handlerInput.responseBuilder\n\t\t\t\t.speak(\"Could not create or access your DynamoDB Table. Please verify that your IAM role has a Full Access permission to use DynamoDB.\")\n\t\t\t\t.getResponse();\n\t\t} else if (err.match(new RegExp(\"Requested resource not found\", \"gi\")) != null) {\n\t\t\treturn handlerInput.responseBuilder\n\t\t\t\t.speak(\"A DynamoDB Table for this skill is being created. Please try again in 5 minutes.\")\n\t\t\t\t.getResponse();\n\t\t} else {\n\t\t\treturn handlerInput.responseBuilder\n\t\t\t\t.speak(\"Something went wrong while loading your progress. Try again later, and if the problem persists please contact the skill publisher.\")\n\t\t\t\t.getResponse();\n\t\t}\n\t}\n}\n\n"]}