{"version":3,"file":"driver.js","sourceRoot":"","sources":["../../driver/driver.ts"],"names":[],"mappings":"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","sourcesContent":["declare var process : {\n\tenv: {\n      platform: string,\n      ABC_DEBUG_PAD_SIZE: string\n\t},\n\tplatform: string\n}\n\nimport { UserInput, Choice, AudioItem, SceneAudioItem, StateDiffItem, VisualOptions, ResultOption } from './driverEntity';\n\nimport { ABCImportPlugin } from './../importPlugins/importerPlugin';\n\nimport { BuiltInScenes, StoryMetadata, Instruction, InstructionType, Scene} from '../story/storyMetadata';\n\nimport { StoryAccessor } from '../story/storyAccessor';\n\nimport { DefaultFormatImportPlugin } from '../importPlugins/DefaultFormatImportPlugin';\n\nimport { isDriverExtension, isInstructionExtension,\n    InstructionExtension, ImporterExtension, DriverExtension } from '../extensions/ACEExtension';\n\nimport { StoryStateHelper } from './storyStateHelper';\n\nimport { createHash } from 'crypto';\nimport { PlayStage } from './PlayStage';\nimport { UserInputHelper } from '../importPlugins/userInputHelper';\n\nimport { AudioFileAccessor, PollyUtil, S3AudioAccessor } from '@alexa-games/sfb-polly';\n\nimport { TokenReplacer } from '../transformers/tokenReplacer';\nimport { SegmenterBuilder } from '../transformers/segmenter';\n\nimport { AudioItemUtil } from './AudioItemUtil';\nimport { CallStackUtil } from './callStackUtil';\n\nconst TOTAL_SCENES_PROCESS_SAFEGUARD = 1000;\nconst isWin = (process.platform === \"win32\");\n\ntype ACEExtensionType = ImporterExtension | DriverExtension | InstructionExtension;\n\nexport interface Narrator {\n    name: string;\n    pitch: string;\n    rate: string;\n    volume: string;\n    engine?: string;\n}\n\nexport interface DriverPollyConfig {\n    enabled: boolean;\n    enabledInPreview?: boolean;\n    previewPollyVoice?: string;\n    combineAudioTags: boolean;\n    dontUseCache: boolean;\n    s3DomainName: string;\n    bucketName: string;\n    FFMPEGLocation: string;\n    workingDir: string;\n    cognito?: {\n        identityPoolId: string;\n        loginWithAmazonAccessToken?: string;\n    }\n    [key: string]: any;\n}\n\nexport class ACEDriver {\n    static readonly SSML_AUDIO_LIMIT = 5;\n\n    public static debug: boolean = false;\n    public static testing: boolean = false;\n\n    /**\n     * flag this variable to alway run the average value for dice rolls.\n     */\n    public static probabilityOff: boolean = false;\n\n    private isPollyAsDefault: boolean = false;\n\n    private importHandlersByType : {[key: string] : ABCImportPlugin} = {};\n\n    private customExtensions: ACEExtensionType[] = [];\n\n    private resultOptions: ResultOption[] = [];\n\n    public storyState: {[key: string]: any};\n\n    public storyAccessor: StoryAccessor;\n\n    public stage: PlayStage;\n\n    public audioItemUtil: AudioItemUtil;\n\n    private playQueue: {\n        sceneID: string,\n        property: string\n    }[] = [];\n\n    private unhandledChoiceFlag = false;\n    private isPausing: boolean = false;\n    private isRepeating: boolean = false;\n    private locale: string;\n\n    public pollyConfig: DriverPollyConfig;\n\n    private defaultNarrator: Narrator = {\n        name: \"Joanna\",\n        pitch: \"\",\n        rate: \"\",\n        volume: \"1.0\"\n    }\n\n    private pollyUtil: PollyUtil;\n\n    private audioAccessor: AudioFileAccessor;\n\n    private callStack: CallStackUtil;\n\n    historySize: number = 10;\n\n    constructor(storyMetadata: StoryMetadata, customImportPlugins?: ABCImportPlugin[], extensions?: ACEExtensionType[], pollyConfiguration?: DriverPollyConfig, locale: string = 'en-US', audioAccessor?: AudioFileAccessor, pollyUtil?: PollyUtil) {\n        this.locale = locale;\n\n        if (pollyConfiguration) {\n            this.pollyConfig = pollyConfiguration;\n        } else if(isWin) {\n            this.pollyConfig = {bucketName: \"sfb-sample-bucket\", combineAudioTags: true, dontUseCache: true, FFMPEGLocation: \"..\\\\ffmpeg.exe\", workingDir: \"c:\\\\Tmp\", enabledInPreview:false, enabled:false, s3DomainName:\"s3.amazonaws.com\"};\n        } else {\n            this.pollyConfig = {bucketName: \"sfb-sample-bucket\", combineAudioTags: true, dontUseCache: true, FFMPEGLocation: \"./ffmpeg\", workingDir: \"/Tmp\", enabledInPreview:false, enabled:false, s3DomainName:\"s3.amazonaws.com\"};\n        }\n\n        PollyUtil.configurePolly(this.pollyConfig);\n\n        this.audioAccessor = audioAccessor ||\n            new S3AudioAccessor({\n                audioWorkingDir: this.pollyConfig.workingDir,\n                s3DomainName: this.pollyConfig.s3DomainName || \"s3.amazonaws.com\",\n                bucketName: this.pollyConfig.bucketName,\n            });\n\n        this.pollyUtil = pollyUtil ||  new PollyUtil(this.audioAccessor);\n\n        this.storyAccessor = new StoryAccessor(storyMetadata);\n\n        this.callStack = new CallStackUtil(this.storyAccessor);\n\n        this.storyState = {};\n\n        this.audioItemUtil = new AudioItemUtil();\n\n        this.stage = new PlayStage(this.audioItemUtil);\n\n        let importPlugins: ABCImportPlugin[] = [\n\t\t\tnew DefaultFormatImportPlugin()\n\t\t];\n\n\t\tif (customImportPlugins) {\n\t\t\timportPlugins = importPlugins.concat(customImportPlugins);\n        }\n\n\t\tfor (let importPlug of importPlugins) {\n\t\t\tthis.importHandlersByType[importPlug.pluginName] = importPlug;\n        }\n\n        if (extensions) {\n            this.customExtensions = this.customExtensions.concat(extensions);\n        }\n    }\n\n    /**\n     * invoke before calling resumeStory if the story history and progress needs to be reset by running the start sequence.\n     * onStart implementation of all registered extensions are run.\n     *\n     * @param startingStoryState\n     */\n    public async resetStory(startingStoryState?: {[key: string]: any}) {\n        this.storyState = JSON.parse(JSON.stringify(startingStoryState || this.storyState));\n\n        StoryStateHelper.setCurrentSceneID(this.storyState, BuiltInScenes.StartScene);\n        StoryStateHelper.resetAvailableChoices(this.storyState);\n        StoryStateHelper.resetChoiceHistory(this.storyState);\n\n        return;\n    }\n\n    /**\n     * Resume the story.\n     * If story has been paused, run the resume cycle by playing the 'Resume' scene first.\n     * Otherwise, Run normally from the bookmarked scene ID.\n     *\n     * @param userInput\n     * @param startingStoryState\n     */\n    public async resumeStory(_userInput: UserInput, startingStoryState?: {[key: string]: any}) {\n        this.storyState = JSON.parse(JSON.stringify(startingStoryState || this.storyState));\n\n        if (StoryStateHelper.isEndingReached(this.storyState)) {\n            delete this.storyState.system_prevRecap;\n            delete this.storyState.system_prevSpeech;\n\n            StoryStateHelper.setEndingReached(this.storyState, false);\n        }\n\n        this.playQueue = [];\n        this.unhandledChoiceFlag = false; // Reset to false\n        this.isRepeating = false;\n\n        // apply user input extension by DriverExtensions\n        const inputHelper = new UserInputHelper(_userInput);\n        for (let extension of this.customExtensions) {\n            if (!isDriverExtension(extension)) {\n                continue;\n            }\n\n            await extension.pre({\n                driver: this,\n                storyState: this.storyState,\n                userInputHelper: inputHelper,\n                locale: this.locale\n            });\n        }\n\n        const userInput = inputHelper.getUserInput();\n\n        if (!StoryStateHelper.isStoryPaused(this.storyState) && !this.isPausing) {\n            await this.processChoice.call(this, userInput);\n        }\n\n        if (!this.isRepeating) {\n            if(ACEDriver.debug) console.log(\"[DEBUG] Play queue length: \" + this.playQueue.length);\n            if (this.playQueue.length === 0) {\n                let bookmarkedSceneID: string | null = StoryStateHelper.getCurrentSceneID(this.storyState);\n                if(ACEDriver.debug) console.log(\"[DEBUG] Current bookmark: \" + bookmarkedSceneID);\n\n                if (bookmarkedSceneID == null) {\n                    if(ACEDriver.debug) console.log(\"[DEBUG] Enqueue start scene\");\n\n                    this.playQueue.push({\n                        sceneID: BuiltInScenes.StartScene,\n                        property: \"narration\"\n                    });\n                } else {\n                    let resumeExists: boolean = false;\n\n                    try {\n                        let scene: Scene = this.storyAccessor.getSceneByID(BuiltInScenes.ResumeScene);\n\n                        if (scene) {\n                            resumeExists = true;\n                        }\n                    } catch(err) {\n                        resumeExists = false;\n                    }\n\n                    if (StoryStateHelper.isStoryPaused(this.storyState) && resumeExists) {\n                        if(ACEDriver.debug) console.log(\"[DEBUG] Enqueue resume scene, and clear choices.\");\n                        StoryStateHelper.resetAvailableChoices(this.storyState);\n                        if (StoryStateHelper.getCurrentSceneID(this.storyState) !== BuiltInScenes.PauseScene) {\n                            this.storyState.resume = StoryStateHelper.getCurrentSceneID(this.storyState);\n                        }\n                        this.playQueue.push({\n                            sceneID: BuiltInScenes.ResumeScene,\n                            property: \"narration\"\n                        });\n                    } else {\n                        if(ACEDriver.debug) console.log(\"[DEBUG] Enqueue saved scene: \" + bookmarkedSceneID);\n\n                        this.playQueue.push({\n                            sceneID: bookmarkedSceneID,\n                            property: \"narration\"\n                        });\n                    }\n\n                    // Also set a flag to indicate that we hit an unhandled choice so the caller can do something different if they want to\n                    this.unhandledChoiceFlag = true;\n                }\n            }\n\n            StoryStateHelper.setStoryPaused(this.storyState, false);\n\n            if (!this.storyState.system_originStack) {\n                this.storyState.system_originStack = [];\n            }\n\n            this.storyState.system_originStack.push(this.playQueue[0]);\n\n            if (this.storyState.system_originStack.length > this.historySize) {\n                // too large, remove first item\n                this.storyState.system_originStack.splice(0, 1);\n            }\n\n            let totalScenesProcessedCount = 0;\n\n            while (this.playQueue.length > 0 && !this.isPausing) {\n\n                let dequeuedSceneID: {\n                    sceneID: string,\n                    property: string\n                } = this.playQueue.splice(0, 1)[0];\n\n                if(ACEDriver.debug) console.log(\"[DEBUG] Setting the current scene to: \" + dequeuedSceneID);\n                this.stage.logVisitedScene(dequeuedSceneID.sceneID);\n\n                StoryStateHelper.setCurrentSceneID(this.storyState, dequeuedSceneID.sceneID);\n\n                let preProcessState: string = JSON.stringify(this.storyState);\n\n                await this.processScene.call(this, undefined, dequeuedSceneID.property);\n\n                if (ACEDriver.testing) {\n                    let beforeStructure: any = JSON.parse(preProcessState);\n                    console.log(\"\\n\");\n                    check(\"\", beforeStructure, this.storyState);\n                }\n\n                totalScenesProcessedCount++;\n                if(totalScenesProcessedCount >= TOTAL_SCENES_PROCESS_SAFEGUARD) {\n                    throw new Error(\"[ACE Driver - Infinite Loop] Looped \" + TOTAL_SCENES_PROCESS_SAFEGUARD + \" times, last scene ID was: \" + dequeuedSceneID.sceneID + \". Please fix your infinite loop.\");\n                }\n            }\n\n            if (this.isPausing) {\n                this.isPausing = false;\n                await this.executePauseSequence(_userInput);\n            }\n        }\n\n        this.storyState.system_prevSpeech = this.stage.getStageSpeechAudioSequence();\n        this.storyState.system_prevReprompt = this.stage.getStageRepromptAudioSequence();\n        this.storyState.system_prevRecap = this.stage.getStageRecapAudioSequence();\n\n        // apply user input extension by DriverExtensions\n        for (let extension of this.customExtensions) {\n            if (!isDriverExtension(extension)) {\n                continue;\n            }\n\n            await extension.post({\n                driver: this,\n                storyState: this.storyState,\n                userInputHelper: inputHelper,\n                locale: this.locale\n            });\n        }\n    }\n\n    public pauseStory() {\n        this.isPausing = true;\n    }\n\n    /**\n     * Run the pause sequence by playing the 'Pause' scene.\n     *\n     * @param startingStoryState\n     */\n    private async executePauseSequence(_userInput: UserInput, startingStoryState?: {[key: string]: any}) {\n        this.storyState = Object.assign({}, startingStoryState || this.storyState);\n\n        let savingSceneID: string | null = StoryStateHelper.getCurrentSceneID(this.storyState);\n\n        if (savingSceneID == BuiltInScenes.ResumeScene) {\n            savingSceneID = this.storyState.resume\n        }\n\n        StoryStateHelper.setCurrentSceneID(this.storyState, BuiltInScenes.PauseScene);\n\n        let preProcessState: string = JSON.stringify(this.storyState);\n\n        await this.processScene.call(this);\n\n        if (ACEDriver.testing) {\n            let beforeStructure: any = JSON.parse(preProcessState);\n            console.log(\"\\n\");\n            check(\"\", beforeStructure, this.storyState);\n        }\n\n        // saving the previous scene for next resume.\n        StoryStateHelper.setCurrentSceneID(this.storyState, savingSceneID === null ? BuiltInScenes.StartScene: savingSceneID);\n\n        StoryStateHelper.setStoryPaused(this.storyState, true);\n\n        // apply user input extension by DriverExtensions\n        const inputHelper = new UserInputHelper(_userInput);\n        for (let extension of this.customExtensions) {\n            if (!isDriverExtension(extension)) {\n                continue;\n            }\n\n            await extension.post({\n                driver: this,\n                storyState: this.storyState,\n                userInputHelper: inputHelper,\n                locale: this.locale\n            });\n        }\n\n        return;\n    }\n\n    /**\n     * Configure the default polly narrator settings.\n     */\n    public configureDefaultPollyNarrator(narrator: Narrator) {\n        console.info(\"[INFO] Default narrator set: \" + JSON.stringify(narrator));\n        this.defaultNarrator = narrator;\n    }\n\n    /**\n     * Turning on the 'default polly' causes all narration texts (including the ones not surrounded by the 'voice' tag) to be read in polly voice.\n     * The polly voice setting for this can be configured by calling configureDefaultPollyNarrator().\n     */\n    public turnOnDefaultPolly() {\n        this.isPollyAsDefault = true;\n    }\n\n    /**\n     * Turning off the 'default polly' causes all narration texts (texts NOT surrounded by the 'voice' tag) to be processed as non-polly voice.\n     */\n    public turnOffDefaultPolly() {\n        this.isPollyAsDefault = false;\n    }\n\n    public async getSpeechSSMLText() {\n        let {ssml} = await this.buildAudioScenes(this.stage.getStageSpeechAudioSequence());\n\n        return ssml;\n    }\n\n    public async getSpeechSSMLTextPerScene() {\n        const sceneAudioItems = this.stage.getStageSpeechAudioSequence(true);\n\n        const scenesAndSsmlList: any = [];\n\n        for(let item of sceneAudioItems) {\n\n            let {ssml} = await this.buildAudioScenes([item]);\n\n            let sceneAndSsml = { sceneID: item.sceneID, sceneAudioItem: item, ssml }\n\n            scenesAndSsmlList.push(sceneAndSsml);\n        }\n\n        return scenesAndSsmlList;\n    }\n\n    public getVisitedSceneIDsOnRun(): string[] {\n        return this.stage.getVisitedSceneIDsOnRun();\n    }\n\n    public async getSpeechSSMLAndPrettyText() {\n        let {ssml, pretty, errorMessage} = await this.buildAudioScenes(this.stage.getStageSpeechAudioSequence());\n\n        return {ssml, pretty, errorMessage};\n    }\n\n    public async getRepromptSSMLText() {\n        let {ssml} = await this.buildAudioScenes(this.stage.getStageRepromptAudioSequence());\n\n        return ssml;\n    }\n\n    public async getRepromptSSMLAndPrettyText() {\n        let {ssml, pretty, errorMessage} = await this.buildAudioScenes(this.stage.getStageRepromptAudioSequence());\n\n        return {ssml, pretty, errorMessage};\n    }\n\n    public async getVisuals() : Promise<VisualOptions[] | undefined> {\n        return this.stage.getStageVisualOptions();\n    }\n\n    public async buildAudioScenes(sceneAudioItemList: SceneAudioItem[]): Promise<{ssml: string, pretty: string, errorMessage?: string}> {\n        const mixedSceneAudio = await this.audioItemUtil.proccessSceneAudioItems(sceneAudioItemList, this.pollyConfig, this.audioAccessor);\n\n        let ssml = \"\";\n        let errorMessage;\n        try {\n            if (mixedSceneAudio.length > 0 ){\n                const audioTypeCount: number = this.audioItemUtil.getAudioCount(mixedSceneAudio);\n\n                if (this.pollyConfig.enabled && ((audioTypeCount > 5 && this.pollyConfig.combineAudioTags) || this.pollyConfig.enabledInPreview)) {\n\n                    const combinedAudioItems = await this.audioItemUtil.combineConsecutiveAudioItems(mixedSceneAudio, this.pollyConfig, this.audioAccessor, ACEDriver.SSML_AUDIO_LIMIT);\n\n                    ssml = this.audioItemUtil.generateSSMLText([{\n                        foreground: combinedAudioItems,\n                        background: []\n                    }], this.pollyConfig);\n                } else {\n                    ssml = this.audioItemUtil.generateSSMLText(mixedSceneAudio, this.pollyConfig);\n                }\n            }\n        } catch (err) {\n            errorMessage = \"[ERROR] Could not generate mixed audio. Please verify that your resources path is correctly configured.\";\n            console.log(errorMessage, err);\n        }\n\n        const previewSSML = this.audioItemUtil.generateSSMLText(sceneAudioItemList, this.pollyConfig);\n\n        if (!this.pollyConfig.dontUploadToS3) {\n            await this.audioItemUtil.uploadGeneratedFiles(this.audioAccessor, this.pollyConfig.workingDir);\n        }\n\n        return {ssml: ssml, pretty: previewSSML, errorMessage};\n    }\n\n    /**\n     * Get the current story state.\n     */\n    public getCurrentStoryState(): {[key: string]: any} {\n        return JSON.parse(JSON.stringify(this.storyState)); //deep copy\n    }\n\n    public getResultOptions(): ResultOption[] {\n        return this.resultOptions;\n    }\n\n    /**\n     * See if the scene marked as ending, or scene leading to no new choice has been reached as a result of the current resume/run.\n     */\n    public isEndingReached(): boolean {\n        return StoryStateHelper.isEndingReached(this.storyState);\n    }\n\n    /**\n     * See if a choice was unhandled and allow the caller to do something else if they need to.\n     */\n    public isUnhandledChoice(): boolean {\n        return this.unhandledChoiceFlag;\n    }\n\n    /**\n     * Execute the selected choice indicated by the user input.\n     */\n    public async processChoice(userInput: UserInput): Promise<any> {\n        return new Promise<any> (async (resolve, reject) => {\n            if (ACEDriver.debug) console.log(\"[DEBUG] Calling processChoice\");\n\n            const availableChoices: Choice[] = StoryStateHelper.getAvailableChoices(this.storyState)\n\n            if (ACEDriver.debug) console.log(\"[DEBUG] Loading Available Choices: \" + JSON.stringify(availableChoices, null, 4));\n\n            const selectedChoice: Choice | null = StoryStateHelper.getChoiceByUserInput(this.storyState, userInput, this.locale);\n\n            if (ACEDriver.debug) console.log(`[DEBUG] With UserInput=${JSON.stringify(userInput)}, Selected Choice=${JSON.stringify(selectedChoice, null, 4)}`);\n\n            if (selectedChoice == null) {\n                if ((!this.storyState.system_prevRecap || this.storyState.system_prevRecap.length == 0)\n                    && (!this.storyState.system_prevSpeech || this.storyState.system_prevSpeech.length == 0)) {\n                    this.isRepeating = false;\n                } else {\n                    if (this.storyState.system_prevRecap && this.storyState.system_prevRecap.length > 0) {\n                        this.stage.appendStageSpeechAudioSequence(this.storyState.system_prevRecap);\n                        this.stage.appendStageRepromptAudioSequence(this.storyState.system_prevRecap);\n                    } else if (this.storyState.system_prevSpeech && this.storyState.system_prevSpeech.length > 0) {\n                        this.stage.appendStageSpeechAudioSequence(this.storyState.system_prevSpeech);\n                        this.stage.appendStageRepromptAudioSequence(this.storyState.system_prevSpeech);\n                    }\n\n                    if (this.storyState.system_prevReprompt && this.storyState.system_prevReprompt.length > 0) {\n                        this.stage.setStageRepromptAudioSequence(this.storyState.system_prevReprompt);\n                    }\n\n                    this.isRepeating = true;\n                }\n            } else {\n                StoryStateHelper.setSelectedChoiceID(this.storyState, selectedChoice.id);\n\n                const beforeState: any = JSON.parse(JSON.stringify(this.storyState));\n\n                try {\n                    if (selectedChoice.sceneDirections) {\n                        // Keep for backwards compatibility.\n                        let tempChoiceInstructionAddress: string = StoryStateHelper.getCurrentSceneID(this.storyState) + \":\" + selectedChoice.id + \":\" + -1;\n                        this.storyState.system_instruction_mem = this.storyState.system_instruction_mem || [];\n                        this.storyState.system_instruction_mem[tempChoiceInstructionAddress] = selectedChoice.sceneDirections;\n    \n                        await this.performInstructions.call(this, tempChoiceInstructionAddress);\n                    } else if (selectedChoice.instructionAddress) {\n                        await this.performInstructions.call(this, selectedChoice.instructionAddress);\n                    }\n                } catch (err) {\n                    reject(err);\n                }\n\n                if (!this.isRepeating) {\n                    StoryStateHelper.resetAvailableChoices(this.storyState);\n\n                    if (selectedChoice.saveToHistory) {\n                        StoryStateHelper.addChoiceHistory(this.storyState, selectedChoice, getStateDiffs(beforeState, this.storyState), this.historySize);\n                    }\n                }\n            }\n\n            StoryStateHelper.clearSelectedChoiceID(this.storyState);\n            resolve();\n        });\n    }\n\n    /**\n     * Process the current scene. Updating speech, reprompt, variables as indicated by the scene.\n     */\n    private async processScene(sceneID?: string, sceneProperty?: string): Promise<any> {\n        if (ACEDriver.debug) console.log(\"[INFO] Calling processScene.\");\n\n        let currentSceneID: string | null = StoryStateHelper.getCurrentSceneID(this.storyState);\n\n        if (sceneID) {\n            currentSceneID = sceneID;\n        }\n\n        if (ACEDriver.testing) {\n            console.log(\"\\n\\nSCENE '\" + currentSceneID + \"'\");\n            console.log(\"........................\");\n        }\n\n        let currentScene: Scene | undefined = undefined;\n        if (currentSceneID != null) {\n            currentScene = this.storyAccessor.getSceneByID(currentSceneID || \"\");\n        }\n\n        if (!currentScene) {\n            if (ACEDriver.debug) throw new Error(`[WARN] Cannot find the Scene=[${currentSceneID}]`);\n            else return;\n        }\n\n        this.stage.startNewScene(currentSceneID || \"\");\n\n        StoryStateHelper.clearRecap(this.storyState);\n\n        for (let variation of currentScene.contents) {\n            // evaluate body's conditional\n            let conditionPassed: boolean = true;\n\n            if (variation.condition && !variation.condition.startsWith(\"otherwise\")) {\n                if (ACEDriver.debug) console.log(\"[DEBUG] pre-substitution condition= \" + JSON.stringify(variation.condition, null, 4));\n\n                let substitution  = replaceVariables(variation.condition, this.storyState, true);\n\n                if (ACEDriver.debug) console.log(\"[DEBUG] post-substitution condition= \" + substitution);\n\n                if(!evalInContext(substitution, this)) {\n                    conditionPassed = false;\n                }\n                \n            }\n\n            if (!conditionPassed) {\n                if (ACEDriver.testing && variation.condition) console.log(`${padString(\"FAILED\",8)}\\t>${variation.condition}`);\n                continue;\n            }\n\n            if (ACEDriver.testing && variation.condition) console.log(`${padString(\"PASSED\",8)}\\t>${variation.condition}`);\n\n            /*\n            * Narration\n            */\n            let sceneNarration: AudioItem[] = [];\n\n            if (variation.narration) {\n                let narrationText: string = replaceVariables(variation.narration, this.storyState, false)\n                    .replace(/\\n/g, \" \")\n                    .replace(/[\\s]+/g, \" \");\n\n                let narrationVariations: string[] = narrationText.split(\"||\");\n\n                let selectedNarration: string = narrationVariations[Math.floor(Math.random() * narrationVariations.length)];\n                sceneNarration = this.audioItemUtil.buildAudioItemsFromSSML(selectedNarration, this.isPollyAsDefault? this.defaultNarrator : undefined);\n            }\n\n            /*\n            * Scene Directions\n            */\n            if (variation.sceneDirections && variation.sceneDirections.length > 0) {\n                const instructionSetAddress = this.callStack.getSceneAddress(currentSceneID || \"\", 0);\n\n                await this.performInstructions(instructionSetAddress);\n            }\n\n            if (sceneProperty && sceneProperty.trim().toLowerCase() == \"reprompt\" && this.stage.getRepromptSceneAudio().foreground.length > 0) {\n                sceneNarration = this.stage.getRepromptSceneAudio().foreground;\n            }\n\n            if (sceneProperty && sceneProperty.trim().toLowerCase() == \"recap\" && this.stage.getRecapSceneAudio().foreground.length > 0) {\n                sceneNarration = this.stage.getRecapSceneAudio().foreground;\n            }\n\n            this.stage.appendSceneSpeechForeground(sceneNarration);\n\n            break; // Only one of the scene variations are played.\n        }\n\n        this.stage.closeScene();\n    }\n\n    /**\n     * Peform given list of scene directions in order.\n     *\n     * @param directions Scene Directions to peform.\n     * @return returns the resulting scene direction where all the variables are replaced by the actual values.\n     */\n    public async performInstructions(instructionAddress: string): Promise<boolean> {\n        if (ACEDriver.debug) console.log(`[DEBUG] Calling performInstructions...`);\n\n        let isTerminatingDirection: boolean = false;\n\n        let visualAlreadyDefined: boolean = false;\n\n        let directions: Instruction[] = [];\n\n        if (this.storyState.system_instruction_mem && this.storyState.system_instruction_mem[instructionAddress]) {\n            // For backward compatibility, needs to stay\n            directions = this.storyState.system_instruction_mem[instructionAddress];\n        } else {\n            directions = this.callStack.getInstructions(instructionAddress, this.storyState);\n        }\n\n        for (let lineNumber = 0 ; lineNumber < directions.length; lineNumber++) {\n            let parameters: {[key: string]: any;} = JSON.parse(JSON.stringify(directions[lineNumber].parameters));\n            let type: InstructionType = directions[lineNumber].directionType;\n\n            for (let paramName of Object.keys(parameters)) {\n                if (typeof(parameters[paramName]) == 'string') {\n\n                    const isCondition = paramName === \"condition\";\n\n                    parameters[paramName] = replaceVariables(parameters[paramName], this.storyState, isCondition);\n                }\n            }\n\n            switch(type) {\n            case InstructionType.CUSTOM: {\n\n                if (ACEDriver.testing) console.log(`${padString(\"CUSTOM\",8)}\\t> calling custom instruction with:\\n${JSON.stringify(parameters, null, 4)}`);\n\n                for (let extension of this.customExtensions) {\n                    if (isInstructionExtension(extension)) {\n                        const customInstructionName: string = parameters.customName;\n\n                        if ((extension as any)[customInstructionName]) {\n                            await (extension as any)[customInstructionName]({\n                                    instructionName:parameters.customName,\n                                    instructionParameters: parameters,\n                                    playStage: this.stage,\n                                    storyAccessor: this.storyAccessor,\n                                    storyState: this.storyState\n                                });\n                        }\n                    } else {\n                        continue;\n                    }\n                }\n\n                break;\n            }\n            case InstructionType.SLOT: {\n                const variableName: string = parameters.variableName;\n                const slotType: string = parameters.variableType;\n\n                StoryStateHelper.addExpectedCustomSlot(this.storyState, variableName);\n\n                if (ACEDriver.testing) console.log(`${padString(\"SLOT\",8)}\\t>'${variableName}' as ${slotType}`);\n                break;\n            }\n            case InstructionType.BOOKMARK: {\n                let bookmarkName: string = parameters.variableName;\n                let targetName: string | null = parameters.variableValue;\n\n                if (!targetName) {\n                    targetName = StoryStateHelper.getCurrentSceneID(this.storyState);\n                }\n\n                if (targetName == null) {\n                    throw new Error(\"SFBDriver: target is not defined for the bookmark command.\");\n                }\n\n                this.storyState[bookmarkName] = {\n                    type: 'sceneID',\n                    value: targetName\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"BOOKMARK\",8)}\\t>'${bookmarkName}' as ${targetName}`);\n                break;\n\n            }\n            case InstructionType.CHOICE: {\n                let choiceID: string = createHash('md5').update(JSON.stringify(parameters.utterances).trim().toLowerCase()).digest('hex');\n\n                let utterances = parameters.utterances;\n\n                if (parameters.utteranceIDs && parameters.utteranceIDs.length > 0) {\n                    utterances = utterances.concat(parameters.utteranceIDs);\n                }\n\n                let choice: Choice = {\n                    id: choiceID,\n                    instructionAddress: this.callStack.getChoiceAddress(instructionAddress, lineNumber),\n                    utterances: utterances,\n                    saveToHistory: false//parameters.saveToHistory && parameters.saveToHistory.trim().toLowerCase() == 'true'? true: false\n                }\n\n                if (parameters.narration) {\n                    choice.narration = parameters.narration;\n                }\n\n                StoryStateHelper.enqueueAvailableChoice(this.storyState, choice);\n\n                if (ACEDriver.testing) console.log(`${padString(\"CHOICE\",8)}\\t> Register ChoiceID=[${choiceID}] for expected input '${parameters.utterances}'`);\n\n                break;\n            }\n            case InstructionType.CONDITION: {\n                let conditionPassed: boolean = true;\n\n                let conditionString: string = parameters.condition;\n\n                if (ACEDriver.debug) console.log(\"[DEBUG] pre-substitution condition= \" + JSON.stringify(conditionString, null, 4));\n\n                let substitution  = replaceVariables(conditionString, this.storyState, true);\n\n                if (ACEDriver.debug) console.log(\"[DEBUG] post-substitution condition= \" + substitution);\n\n                if(!evalInContext(substitution, this)) {\n                    conditionPassed = false;\n                }\n\n                if (!conditionPassed) {\n                    if (ACEDriver.testing && conditionString) console.log(`${padString(\"FAILED\",8)}\\t>'${directions[lineNumber].parameters.condition}' evaluated as [${conditionString}]`);\n                } else {\n                    if (ACEDriver.testing && conditionString) console.log(`${padString(\"PASSED\",8)}\\t>'${directions[lineNumber].parameters.condition}' evaluated as [${conditionString}]`);\n                    \n                    if (parameters.directions && parameters.directions.length > 0) {\n\n                        const conditionInstructionAddress: string = this.callStack.getConditionAddress(instructionAddress, lineNumber);\n\n                        await this.performInstructions.call(this, conditionInstructionAddress);\n\n                        isTerminatingDirection = true;\n                    }\n                }\n\n                break;\n            }\n            case InstructionType.GO_TO: {\n                let destinationPage: string = parameters.target;\n\n                if (this.storyState[destinationPage] && this.storyState[destinationPage].type == 'sceneID') {\n                    this.playQueue.push({\n                        sceneID: this.storyState[destinationPage].value,\n                        property: parameters.targetSceneProperty || \"narration\"\n                    });\n\n                } else {\n                    this.playQueue.push({\n                        sceneID: destinationPage.toLowerCase(),\n                        property: parameters.targetSceneProperty || \"narration\"\n                    });\n                }\n\n                isTerminatingDirection = true;\n\n                if (ACEDriver.testing) console.log(`${padString(\"GO TO\",8)}\\t>scene '${destinationPage}'`);\n                break;\n            }\n            case InstructionType.SAVE_AND_GO: {\n                let destinationPage: string = parameters.target.toLowerCase();\n\n                const savingAddress: string = this.callStack.getReturnAddress(instructionAddress, lineNumber);\n\n                if (!this.storyState.system_call_stack) {\n                    this.storyState.system_call_stack = [];\n                }\n\n                this.storyState.system_call_stack.push(savingAddress);\n\n                if (ACEDriver.testing) console.log(`${padString(\"CALL\",8)}\\t>scene '${destinationPage}'`);\n\n                this.playQueue.push({\n                    sceneID: destinationPage,\n                    property: parameters.targetSceneProperty || \"narration\"\n                });\n\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case InstructionType.RETURN: {\n                if (this.storyState.system_call_stack && this.storyState.system_call_stack.length > 0) {\n                    const returnAddress: string = this.storyState.system_call_stack.splice(-1, 1)[0];\n\n                    if (ACEDriver.testing) console.log(`${padString(\"RETURN\",8)}\\t> Returning to address ${returnAddress}.'`);\n\n                    const popSceneID = this.callStack.getSourceScene(returnAddress);\n                    StoryStateHelper.setCurrentSceneID(this.storyState, popSceneID);\n                    \n                    await this.performInstructions.call(this, returnAddress);\n                } else {\n                    if (ACEDriver.testing) console.log(`${padString(\"RETURN\",8)}\\t> There is instructions to return to.'`);\n                }\n\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case InstructionType.RESTART: {\n                await this.resetStory();\n                this.playQueue.push({\n                    sceneID: BuiltInScenes.StartScene,\n                    property: parameters.targetSceneProperty || \"narration\"\n                });\n\n                if (ACEDriver.testing) console.log(`${padString(\"RESTART\",8)}\\t> Refresh and restart the story.`);\n\n                isTerminatingDirection = true;\n                break;\n            }\n            case InstructionType.REPEAT: {\n                if (this.storyState.system_prevSpeech && this.storyState.system_prevSpeech.length > 0) {\n                    this.stage.appendStageSpeechAudioSequence(this.storyState.system_prevSpeech);\n                    this.stage.appendStageRepromptAudioSequence(this.storyState.system_prevReprompt);\n\n                    if (ACEDriver.testing) console.log(`${padString(\"REPEAT\",8)}\\t> Repeating previously heard speech:\\n${JSON.stringify(this.storyState.system_prevSpeech, null, 4)}\\nreprompt:\\n${JSON.stringify(this.storyState.system_prevReprompt, null, 4)}`);\n                } else {\n                    if (ACEDriver.testing) console.log(`${padString(\"REPEAT\",8)}\\t> Nothing to repeat.'`);\n                }\n\n                this.isRepeating = true;\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case InstructionType.REPEAT_REPROMPT: {\n                if (this.storyState.system_prevReprompt && this.storyState.system_prevReprompt.length > 0) {\n                    this.stage.setStageSpeechAudioSequence(this.stage.getStageRepromptAudioSequence().concat(this.storyState.system_prevReprompt));\n                    this.stage.appendStageRepromptAudioSequence(this.storyState.system_prevReprompt);\n\n                    if (ACEDriver.testing) console.log(`${padString(\"RE-REPROMPT\",8)}\\t> Repeating previously heard reprompt:\\n${JSON.stringify(this.storyState.system_prevReprompt, null, 4)}`);\n                } else {\n                    if (ACEDriver.testing) console.log(`${padString(\"RE-REPROMPT\",8)}\\t> Nothing to reprompt.'`);\n                }\n\n                this.isRepeating = true;\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case InstructionType.BACK: {\n                let countBack: number = parameters.count + 1;\n\n                if (!this.storyState.system_originStack || this.storyState.system_originStack.length == 0) {\n                    if (ACEDriver.testing) console.log(`${padString(\"BACK\",8)}\\t>There is no scene to go back to.`);\n                } else {\n                    let transitionStack: string[] = JSON.parse(JSON.stringify(this.storyState.system_originStack));\n\n                    let destinationScene: any = undefined;\n\n                    while (countBack-- > 0 && transitionStack.length > 0) {\n                        destinationScene = transitionStack.splice(-1, 1)[0];\n                    }\n\n                    this.playQueue.push(destinationScene);\n\n                    this.storyState.system_originStack = transitionStack;\n                    if (ACEDriver.testing) console.log(`${padString(\"BACK\",8)}\\t> back count=${parameters.count} to scene '${JSON.stringify(destinationScene)}'`);\n                }\n\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case InstructionType.RECAP: {\n                let recapMessage: string[] = replaceVariables(parameters.message, this.storyState, false)\n                    .replace(/\\n/g, \" \")\n                    .replace(/[\\s]+/g, \" \")\n                    .split(\"||\");\n\n                let selectedRecap: string = recapMessage[Math.floor(Math.random() * recapMessage.length)];\n\n                if (selectedRecap.trim().length > 0) {\n                    this.stage.appendSceneRecapForeground(this.audioItemUtil.buildAudioItemsFromSSML(selectedRecap.replace(/\\n/g, ' ').replace(/[\\s]+/g, ' '), this.isPollyAsDefault? this.defaultNarrator : undefined));\n\n                    if (ACEDriver.testing) console.log(`${padString(\"RECAP\",8)}\\t>'${selectedRecap}'`);\n                } else {\n                    if (ACEDriver.testing) console.log(`${padString(\"RECAP\",8)}\\t>'Nothing to set as recap message.'`);\n                }\n\n                break;\n            }\n            case InstructionType.END: {\n                StoryStateHelper.setEndingReached(this.storyState, true);\n                await this.resetStory();\n                this.isRepeating = true;\n\n                if (ACEDriver.testing) console.log(`END`);\n\n                isTerminatingDirection = true;\n                break;\n            }\n            case InstructionType.PAUSE: {\n                this.isPausing = true;\n                if (ACEDriver.testing) console.log(`PAUSE`);\n\n                isTerminatingDirection = true;\n                break;\n            }\n            case InstructionType.BGM: {\n                let bgmURL: string = parameters.audioURL;\n\n                this.stage.appendSceneSpeechBackground(\n                    this.audioItemUtil.buildAudioItemsFromSSML(`<audio src='${bgmURL}' delay='${parameters.delayMs||\"\"}' volume='${parameters.volume||\"\"}' blend='${parameters.blend}'/>`, this.isPollyAsDefault? this.defaultNarrator : undefined));\n\n                if (ACEDriver.testing) console.log(`${padString(\"BGM\",8)}\\t>${bgmURL}`);\n                break;\n            }\n            case InstructionType.CLEAR: {\n                let attributeName: string = parameters.variableName;\n\n                if (attributeName.trim() == \"*\") {\n                    attributeName = \"\";\n\n                    for (let key of Object.keys(this.storyState)) {\n                        if (!key.startsWith(\"system_\")) {\n                            attributeName += `${key} ; `;\n                            delete this.storyState[key];\n                        }\n                    }\n\n                } else {\n                    delete this.storyState[attributeName];\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"CLEAR\",8)}\\t>'${attributeName}'`);\n                break;\n            }\n            case InstructionType.ADD_TO_INVENTORY: {\n                let item: string = parameters.itemName;\n                let listName: string = parameters.variableName;\n\n                if (!this.storyState[listName]){\n                    this.storyState[listName] = {};\n                }\n\n                if (!this.storyState[listName][item]) {\n                    this.storyState[listName][item] = 0;\n                }\n\n                this.storyState[listName][item] ++;\n\n                if (ACEDriver.testing) console.log(`${padString(\"ADD INVENTORY\",8)}\\t>'${item}' to '${listName}'`);\n                break;\n            }\n            case InstructionType.ADD_ITEM: {\n                let item: string = parameters.itemName;\n                let listName: string = parameters.variableName;\n                let sizeLimit: string = parameters.size || \"-1\";\n\n                if (!this.storyState[listName]){\n                    this.storyState[listName] = [];\n                }\n\n                this.storyState[listName].push(item);\n\n                let size: number = parseInt(sizeLimit, 10);\n                if (size > 0 && this.storyState[listName].length > size) {\n                    this.storyState[listName].splice(0, this.storyState[listName].length - size);\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"ADD ITEM\",8)}\\t>'${item}' to '${listName}'`);\n                break;\n            }\n            case InstructionType.GET_TIME: {\n                let currentTime: number = new Date().getTime();\n\n                this.storyState.system_return = currentTime;\n\n                if (ACEDriver.testing) console.log(`${padString(\"GET TIME\",8)}\\t>${currentTime}`);\n            }\n            case InstructionType.REMOVE_ITEM: {\n                let item: string = parameters.itemName;\n                let listName: string = parameters.variableName;\n\n                if (this.storyState[listName] && typeof this.storyState[listName].length == 'number') {\n                    let deletingIndex: number = -1;\n                    for (let i = 0; i < this.storyState[listName].length; i ++) {\n                        if (this.storyState[listName][i] == item) {\n                            deletingIndex = i;\n                            break;\n                        }\n                    }\n\n                    if (deletingIndex >= 0) {\n                       let removeResult: any = this.storyState[listName].splice(deletingIndex, 1)[0];\n                       this.storyState.system_return = removeResult;\n                    }\n                } else if (this.storyState[listName] && typeof this.storyState[listName].length == 'undefined') {\n                    if (typeof this.storyState[listName][item] == 'number' && this.storyState[listName][item] > 0) {\n                        this.storyState[listName][item] --;\n                    } else if (typeof this.storyState[listName][item] != 'number') {\n                        delete this.storyState[listName][item];\n                    }\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"DEL ITEM\",8)}\\t>'${item}' from '${listName}'`);\n                break;\n            }\n            case InstructionType.REMOVE_FIRST: {\n                let listName: string = parameters.variableName;\n\n                if (this.storyState[listName]) {\n                    let removeResult: any = this.storyState[listName].splice(0, 1)[0]\n\n                    this.storyState.system_return = removeResult;\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"DEL ITEM\",8)}\\t>FIRST from '${listName}'`);\n                break;\n            }\n            case InstructionType.REMOVE_LAST: {\n                let listName: string = parameters.variableName;\n\n                if (this.storyState[listName]) {\n                    let removeResult: any = this.storyState[listName].splice(this.storyState[listName].length - 1, 1);\n\n                    this.storyState.system_return = removeResult;\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"DEL ITEM\",8)}\\t>LAST from '${listName}'`);\n                break;\n            }\n            case InstructionType.FLAG: {\n                let variableName: string = parameters.variableName;\n\n                this.storyState[variableName] = true;\n\n                if (ACEDriver.testing) console.log(`${padString(\"FLAG\",8)}\\t>'${variableName}'`);\n                break;\n            }\n            case InstructionType.UNFLAG: {\n                let variableName: string = parameters.variableName;\n\n                this.storyState[variableName] = false;\n\n                if (ACEDriver.testing) console.log(`${padString(\"UNFLAG\",8)}\\t>'${variableName}'`);\n                break;\n            }\n            case InstructionType.SET: {\n                let variableName: string = parameters.variableName;\n                let value: number | any = parameters.variableValue == \"undefined\"? 0: parseFloat(parameters.variableValue);\n\n                if (parameters.variableValue.length === 0) {\n                    value = \"\";\n                } else if (isNaN(parameters.variableValue)) {\n                    value = parameters.variableValue;\n\n                    if (value == 'true') {\n                        value = true;\n                    } else if (value == 'false') {\n                        value = false;\n                    }\n                }\n\n\n                if (this.storyState[variableName] == undefined) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = value;\n\n                if (ACEDriver.testing) console.log(`${padString(\"SET\",8)}\\t>'${variableName}' as ${value}`);\n                break;\n            }\n            case InstructionType.REDUCE: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) - value) * 100) / 100;\n                if (ACEDriver.testing) console.log(`${padString(\"REDUCE\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case InstructionType.INCREASE: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) + value) * 100) / 100;\n\n                if (ACEDriver.testing) console.log(`${padString(\"INCREASE\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case InstructionType.MULTIPLY: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) * value) * 100) / 100;\n\n                if (ACEDriver.testing) console.log(`${padString(\"MULTIPLY\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case InstructionType.DIVIDE: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) / value) * 100)/100;\n\n                if (ACEDriver.testing) console.log(`${padString(\"DIVIDE\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case InstructionType.MODULUS: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) % value) * 100)/100;\n\n                if (ACEDriver.testing) console.log(`${padString(\"MODULUS\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case InstructionType.ROLL: {\n                let rollEval: string = parameters.diceString;\n\n                this.evaluateDiceRoll(rollEval);\n\n                if (ACEDriver.testing) console.log(`${padString(\"ROLL\",8)}\\t>'${rollEval}'`);\n                break;\n            }\n            case InstructionType.REPROMPT: {\n                let repromptMessages: string[] = replaceVariables(parameters.message, this.storyState, false)\n                    .replace(/\\n/g, \" \")\n                    .replace(/[\\s]+/g, \" \")\n                    .split(\"||\");\n\n                let selectedReprompt: string = repromptMessages[Math.floor(Math.random() * repromptMessages.length)];\n                this.stage.appendSceneRepromptForeground(\n                    this.audioItemUtil.buildAudioItemsFromSSML(selectedReprompt.replace(/\\n/g, ' ').replace(/[\\s]+/g, ' '), this.isPollyAsDefault? this.defaultNarrator : undefined));\n\n                if (ACEDriver.testing) console.log(`${padString(\"REPROMPT\",8)}\\t>'${selectedReprompt}'`);\n                break;\n            }\n            case InstructionType.VISUALS: {\n                if (visualAlreadyDefined) {\n                    let currentVisuals: VisualOptions[] = this.stage.getStageVisualOptions() || [];\n                    currentVisuals[currentVisuals.length - 1] = <VisualOptions>parameters;\n\n                    this.stage.setStageVisualOptions(currentVisuals);\n                } else {\n                    visualAlreadyDefined = true;\n\n                    this.stage.appendStageVisuals(<VisualOptions>parameters);\n                }\n\n                break;\n            }\n            default: {\n                throw new Error(\"[STORY - SYNTAX ERROR] the story effect is not recognized.\\nline number=[\"\n                    + lineNumber + \"]\\nline content=[\"\n                    + JSON.stringify(directions[lineNumber], null, 4) + \"]\\n\"\n                    + \"pageID=[\" + StoryStateHelper.getCurrentSceneID(this.storyState) + \"]\");\n            }\n            }\n\n            if (isTerminatingDirection || lineNumber == directions.length - 1) {\n                const stackExists = this.callStack.callStackExists(this.storyState);\n                const addressInStack = this.callStack.addressInStack(this.storyState, instructionAddress);\n\n                if (stackExists && addressInStack && this.storyState.system_instruction_mem && this.storyState.system_instruction_mem[instructionAddress]) {\n                    delete this.storyState.system_instruction_mem[instructionAddress];\n                }\n                break;\n            }\n        }\n\n        return isTerminatingDirection;\n    }\n\n    /**\n     * Compute a dice roll given a standard dice string.\n     *\n     * @param diceString\n     */\n    private evaluateDiceRoll(diceString: string) {\n        let diceRegex: RegExp = /([\\d])d([\\d]*)+[k]?([\\d]*)/gi\n\n        let diceMatch: RegExpExecArray|null = diceRegex.exec(diceString);\n\n        let rollResults: number[] = [];\n        while (diceMatch != null) {\n            let rollResult: number = 0;\n            let diceCount: number = parseInt(diceMatch[1], 10);\n            let faceCount: number = parseInt(diceMatch[2], 10);\n            let selectCount: number = parseInt(diceMatch[3], 10);\n\n            let rolls: number[] = [];\n            for (let i = 0; i < diceCount; i++) {\n                if (ACEDriver.probabilityOff) {\n                    rolls.push((faceCount + 1) / 2);\n                } else {\n                    rolls.push(Math.floor(Math.random() * faceCount) + 1);\n                }\n            }\n\n            let sumCount: number = rolls.length;\n            if (selectCount) {\n                rolls.sort().reverse(); //descending sort\n                sumCount = selectCount\n            }\n\n            for (let i = 0 ; i < sumCount; i++) {\n                rollResult += rolls[i];\n            }\n\n            rollResults.push(rollResult);\n\n            diceMatch = diceRegex.exec(diceString);\n        }\n\n        let diceMatchReplace: string = diceString.replace(diceRegex, () => {\n            return String(rollResults.splice(0, 1)[0]);\n        });\n\n        let rollFinalEval: any = eval(diceMatchReplace);\n        if (ACEDriver.debug) console.log(\"[DEBUG] Roll result for the entire dice configuration=[\" + diceMatchReplace + \"], result=[\" + rollFinalEval + \"]\" );\n\n        this.storyState.rollResult = rollFinalEval;\n    }\n}\n\nfunction replaceVariables(line: string, eventParams: any, isCondition: boolean): string {\n    const tokenReplacer = new TokenReplacer(SegmenterBuilder.getVariableSegmenter(), eventParams);\n\n    return tokenReplacer.replaceTokens(line, isCondition);\n}\n\n// Evalute the given string given the limited context given\nfunction evalInContext(js : string, context : any) {\n    //# Return the results of the in-line anonymous function we .call with the passed context\n    return function() { return eval(js.replace(/\\bundefined\\b/g, \"false\")); }.call(context);\n}\n\nfunction check(pre:string, before:any, after:any) {\n    let padSize: any = process.env.ABC_DEBUG_PAD_SIZE || 20;\n\n    if ((before === undefined && after !== undefined) || (before !== undefined && after === undefined)) {\n        console.log(`[${padString(pre,padSize)}\\t|\\t${padString(JSON.stringify(before),padSize)}\\t>>>\\t${padString(JSON.stringify(after), padSize)}]`);\n        return;\n    }\n\n    if (after == undefined || after == null) {\n        return;\n    }\n\n    for (let key of Object.keys(after)) {\n        if (typeof after[key] === \"object\") {\n            check(pre + \".\" +  key, before[key], after[key]);\n        } else {\n            if (before[key] !== after[key]) {\n                if (pre.length > 0) {\n                    console.log(`[${padString(pre + \".\" + key, padSize)}\\t|\\t${padString(before[key], padSize)}\\t>>>\\t${padString(after[key], padSize)}]`);\n                } else {\n                    console.log(`[${padString(key, padSize)}\\t|\\t${padString(before[key], padSize)}\\t>>>\\t${padString(after[key], padSize)}]`);\n                }\n            }\n        }\n    }\n    return;\n}\n\nfunction getStateDiffs(before:any, after:any): StateDiffItem[] {\n    let stateDiffs: StateDiffItem[] = [];\n    // check removed items\n    for (let key of Object.keys(before)) {\n        if (before[key] && after[key] === undefined) {\n            stateDiffs.push({\n                itemName: key,\n                beforeValue: JSON.parse(JSON.stringify(before[key])),\n                afterValue: undefined\n            });\n        }\n    }\n\n    for (let key of Object.keys(after)) {\n        if (JSON.stringify(after[key]) != JSON.stringify(before[key])) {\n            stateDiffs.push({\n                itemName: key,\n                beforeValue: before[key]? JSON.parse(JSON.stringify(before[key])) : undefined,\n                afterValue: JSON.parse(JSON.stringify(after[key]))\n            });\n        }\n    }\n\n    return stateDiffs;\n}\n\nfunction padString(incomingText: string, length: number) {\n    let text: string = String(incomingText);\n\n    let result: string = text;\n    if (text.length < length) {\n        for (let i = 0 ; i <= length - text.length; i ++) {\n            result += \" \";\n        }\n    } else {\n        result = \"~\" + result.substring(text.length - length);\n    }\n    return result;\n}\n"]}